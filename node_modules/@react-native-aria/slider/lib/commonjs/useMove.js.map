{"version":3,"sources":["useMove.ts"],"names":["useMove","props","onMoveStart","onMove","onMoveEnd","initialMoveX","setInitialMoveX","initialMoveY","setInitialMoveY","panResponder","React","useMemo","PanResponder","create","onMoveShouldSetPanResponderCapture","_event","onPanResponderGrant","_evt","gestureState","type","pointerType","moveX","moveY","onPanResponderMove","deltaX","deltaY","onPanResponderRelease","moveProps","panHandlers"],"mappings":";;;;;;;AAYA;;AACA;;;;;;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACO,SAASA,OAAT,CAAiBC,KAAjB,EAAyC;AAC9C,MAAI;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA;AAAvB,MAAqCH,KAAzC;AAEA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkC,qBAAS,CAAT,CAAxC;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC,qBAAS,CAAT,CAAxC;;AACA,QAAMC,YAAY,GAAGC,eAAMC,OAAN,CACnB,MACEC,0BAAaC,MAAb,CAAoB;AAClBC,IAAAA,kCAAkC,EAAGC,MAAD,IAAY;AAC9C,aAAO,IAAP;AACD,KAHiB;AAIlBC,IAAAA,mBAAmB,EAAE,CAACC,IAAD,EAAOC,YAAP,KAAwB;AAC3ChB,MAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAG;AACZiB,QAAAA,IAAI,EAAE,WADM;AAEZC,QAAAA,WAAW,EAAE;AAFD,OAAH,CAAX;AAKAd,MAAAA,eAAe,CAACY,YAAY,CAACG,KAAd,CAAf;AACAb,MAAAA,eAAe,CAACU,YAAY,CAACI,KAAd,CAAf;AACD,KAZiB;AAalBC,IAAAA,kBAAkB,EAAE,CAACR,MAAD,EAASG,YAAT,KAA0B;AAC5C,YAAMM,MAAM,GAAGN,YAAY,CAACG,KAAb,GAAqBhB,YAApC;AACA,YAAMoB,MAAM,GAAGP,YAAY,CAACI,KAAb,GAAqBf,YAApC;;AACA,UAAIiB,MAAM,KAAK,CAAX,IAAgBC,MAAM,KAAK,CAA/B,EAAkC;AAChC;AACD;;AAED,UAAID,MAAJ,EAAY;AACVrB,QAAAA,MAAM,CAAC;AACLgB,UAAAA,IAAI,EAAE,MADD;AAELC,UAAAA,WAAW,EAAE,OAFR;AAGLI,UAAAA,MAAM,EAAEA,MAHH;AAILC,UAAAA,MAAM,EAAEA;AAJH,SAAD,CAAN;AAMD;AACF,KA5BiB;AA6BlBC,IAAAA,qBAAqB,EAAE,MAAM;AAC3BtB,MAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAG;AACVe,QAAAA,IAAI,EAAE,SADI;AAEVC,QAAAA,WAAW,EAAE;AAFH,OAAH,CAAT;AAID;AAlCiB,GAApB,CAFiB,EAsCnB,CAACjB,MAAD,EAASC,SAAT,EAAoBF,WAApB,EAAiCG,YAAjC,EAA+CE,YAA/C,CAtCmB,CAArB;;AAyCA,SAAO;AAAEoB,IAAAA,SAAS,EAAElB,YAAY,CAACmB;AAA1B,GAAP;AACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { useState } from 'react';\nimport { PanResponder } from 'react-native';\n\ninterface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: any;\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: any): MoveResult {\n  let { onMoveStart, onMove, onMoveEnd } = props;\n\n  const [initialMoveX, setInitialMoveX] = useState(0);\n  const [initialMoveY, setInitialMoveY] = useState(0);\n  const panResponder = React.useMemo(\n    () =>\n      PanResponder.create({\n        onMoveShouldSetPanResponderCapture: (_event) => {\n          return true;\n        },\n        onPanResponderGrant: (_evt, gestureState) => {\n          onMoveStart?.({\n            type: 'movestart',\n            pointerType: 'touch',\n          });\n\n          setInitialMoveX(gestureState.moveX);\n          setInitialMoveY(gestureState.moveY);\n        },\n        onPanResponderMove: (_event, gestureState) => {\n          const deltaX = gestureState.moveX - initialMoveX;\n          const deltaY = gestureState.moveY - initialMoveY;\n          if (deltaX === 0 && deltaY === 0) {\n            return;\n          }\n\n          if (deltaX) {\n            onMove({\n              type: 'move',\n              pointerType: 'touch',\n              deltaX: deltaX,\n              deltaY: deltaY,\n            });\n          }\n        },\n        onPanResponderRelease: () => {\n          onMoveEnd?.({\n            type: 'moveend',\n            pointerType: 'touch',\n          });\n        },\n      }),\n    [onMove, onMoveEnd, onMoveStart, initialMoveX, initialMoveY]\n  );\n\n  return { moveProps: panResponder.panHandlers };\n}\n"]}